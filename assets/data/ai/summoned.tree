#Generic badguy tree

#Aliases
import wait: "rakaneth.wolfsden.ai.tasks.WaitTask"
import detectPrey?: "rakaneth.wolfsden.ai.conditions.DetectPreyCondition"
import getTarget: "rakaneth.wolfsden.ai.tasks.GetTargetTask"
import moveTowardsPrey: "rakaneth.wolfsden.ai.tasks.MoveTowardsPreyTask"
import preyAdjacent?: "rakaneth.wolfsden.ai.conditions.PreyAdjacentCondition"
import attackPrey: "rakaneth.wolfsden.ai.tasks.AttackPreyTask"
import preyNull?: "rakaneth.wolfsden.ai.conditions.PreyNullCondition"
import preyAlive?: "rakaneth.wolfsden.ai.conditions.PreyAliveCondition"
import preySameLevel?: "rakaneth.wolfsden.ai.conditions.PreySameLevelCondition"
import detectFood?: "rakaneth.wolfsden.ai.conditions.DetectFoodCondition"
import onFood?: "rakaneth.wolfsden.ai.conditions.OnFoodCondition"
import moveTowardsFood: "rakaneth.wolfsden.ai.tasks.MoveTowardsFoodTask"
import eatFood: "rakaneth.wolfsden.ai.tasks.EatFoodTask"
import followLeader: "rakaneth.wolfsden.ai.tasks.FollowLeaderTask"
import leaderNull?: "rakaneth.wolfsden.ai.conditions.LeaderNullCondition"
import canSeeLeader?: "rakaneth.wolfsden.ai.conditions.CanSeeLeaderCondition"

#Check for prey existence
subtree name: "preyExists?"
	sequence
		invert
			preyNull?
		preySameLevel?
		preyAlive?

#Hunting a target
subtree name: "huntPrey"
	selector
		(preyAdjacent?) attackPrey
		moveTowardsPrey

#Check for leader
subtree name: "leaderNear?"
	sequence
		invert
			leaderNull?
		canSeeLeader?

#tree definition
root
	dynamicGuardSelector
		($preyExists?) $huntPrey
		(detectPrey?) getTarget
		($leaderNear?) followLeader
		() wait
